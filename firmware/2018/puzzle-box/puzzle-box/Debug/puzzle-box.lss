
puzzle-box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  00800062  00800062  00000a54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b03  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2f  00000000  00000000  000026f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001399  00000000  00000000  00003322  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000046bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081a  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a3  00000000  00000000  00005186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00006529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	8b c0       	rjmp	.+278    	; 0x11a <__vector_1>
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	6f c0       	rjmp	.+222    	; 0xe6 <__bad_interrupt>
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	6d c0       	rjmp	.+218    	; 0xe6 <__bad_interrupt>
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	6b c0       	rjmp	.+214    	; 0xe6 <__bad_interrupt>
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	69 c0       	rjmp	.+210    	; 0xe6 <__bad_interrupt>
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	67 c0       	rjmp	.+206    	; 0xe6 <__bad_interrupt>
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	65 c0       	rjmp	.+202    	; 0xe6 <__bad_interrupt>
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	63 c0       	rjmp	.+198    	; 0xe6 <__bad_interrupt>
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	61 c0       	rjmp	.+194    	; 0xe6 <__bad_interrupt>
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	05 01       	movw	r0, r10
  28:	09 02       	muls	r16, r25
  2a:	a1 01       	movw	r20, r2
  2c:	09 01       	movw	r0, r18
  2e:	a1 00       	.word	0x00a1	; ????
  30:	05 09       	sbc	r16, r5
  32:	19 01       	movw	r2, r18
  34:	29 03       	fmul	r18, r17
  36:	15 00       	.word	0x0015	; ????
  38:	25 01       	movw	r4, r10
  3a:	95 03       	fmuls	r17, r21
  3c:	75 01       	movw	r14, r10
  3e:	81 02       	muls	r24, r17
  40:	95 01       	movw	r18, r10
  42:	75 05       	cpc	r23, r5
  44:	81 03       	fmuls	r16, r17
  46:	05 01       	movw	r0, r10
  48:	09 30       	cpi	r16, 0x09	; 9
  4a:	09 31       	cpi	r16, 0x19	; 25
  4c:	09 38       	cpi	r16, 0x89	; 137
  4e:	15 81       	ldd	r17, Z+5	; 0x05
  50:	25 7f       	andi	r18, 0xF5	; 245
  52:	75 08       	sbc	r7, r5
  54:	95 03       	fmuls	r17, r21
  56:	81 06       	cpc	r8, r17
  58:	c0 c0       	rjmp	.+384    	; 0x1da <didUnstuff1+0x2>

0000005a <usbDescriptorConfiguration>:
  5a:	09 02 22 00 01 01 00 a0 0a 09 04 00 00 01 03 00     ..".............
  6a:	00 00 09 21 01 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  7a:	00 64                                               .d

0000007c <usbDescriptorDevice>:
  7c:	12 01 10 01 00 00 00 08 c0 16 e8 03 00 01 01 02     ................
  8c:	00 01                                               ..

0000008e <usbDescriptorStringDevice>:
  8e:	0c 03 4d 00 6f 00 75 00 73 00 65 00                 ..M.o.u.s.e.

0000009a <usbDescriptorStringVendor>:
  9a:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  aa:	74 00                                               t.

000000ac <usbDescriptorString0>:
  ac:	04 03 09 04                                         ....

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf e5       	ldi	r28, 0x5F	; 95
  b6:	d4 e0       	ldi	r29, 0x04	; 4
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	a0 e6       	ldi	r26, 0x60	; 96
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	ee eb       	ldi	r30, 0xBE	; 190
  c4:	f9 e0       	ldi	r31, 0x09	; 9
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
  c8:	05 90       	lpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a2 36       	cpi	r26, 0x62	; 98
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	a2 e6       	ldi	r26, 0x62	; 98
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	aa 3a       	cpi	r26, 0xAA	; 170
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	cf d2       	rcall	.+1438   	; 0x682 <main>
  e4:	6a c4       	rjmp	.+2260   	; 0x9ba <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
  e8:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
  ea:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
  f0:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
  f2:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
  f4:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
  f6:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
  f8:	09 c0       	rjmp	.+18     	; 0x10c <usbCrcLoopEntry>

000000fa <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
  fa:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
  fc:	82 27       	eor	r24, r18

000000fe <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
  fe:	97 95       	ror	r25
    ror     resCrcL
 100:	87 95       	ror	r24
    brcs    usbCrcNoXor
 102:	10 f0       	brcs	.+4      	; 0x108 <usbCrcNoXor>
    eor     resCrcL, polyL
 104:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 106:	95 27       	eor	r25, r21

00000108 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 108:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 10a:	c8 f3       	brcs	.-14     	; 0xfe <usbCrcBitLoop>

0000010c <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 10c:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 10e:	a8 f3       	brcs	.-22     	; 0xfa <usbCrcByteLoop>

00000110 <usbCrcReady>:
usbCrcReady:
    ret
 110:	08 95       	ret

00000112 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 112:	ea df       	rcall	.-44     	; 0xe8 <usbCrc16>
    st      ptr+, resCrcL
 114:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 116:	9d 93       	st	X+, r25
    ret
 118:	08 95       	ret

0000011a <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 11a:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 11c:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 11e:	cf 93       	push	r28

00000120 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 120:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 122:	82 9b       	sbis	0x10, 2	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 124:	e9 f7       	brne	.-6      	; 0x120 <waitForJ>

00000126 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 126:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 128:	09 c0       	rjmp	.+18     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 12a:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 12c:	07 c0       	rjmp	.+14     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 12e:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 130:	05 c0       	rjmp	.+10     	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 132:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 134:	03 c0       	rjmp	.+6      	; 0x13c <foundK>
    sbis    USBIN, USBMINUS
 136:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 138:	01 c0       	rjmp	.+2      	; 0x13c <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 13a:	a3 c0       	rjmp	.+326    	; 0x282 <sofError>

0000013c <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 13c:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 13e:	c0 91 8d 00 	lds	r28, 0x008D	; 0x80008d <usbInputBufOffset>
    clr     YH                  ;1 [5]
 142:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 144:	cc 56       	subi	r28, 0x6C	; 108
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 146:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 148:	82 9b       	sbis	0x10, 2	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 14a:	02 c0       	rjmp	.+4      	; 0x150 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 14c:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 14e:	eb cf       	rjmp	.-42     	; 0x126 <waitForK>

00000150 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 150:	2f 93       	push	r18
    push    x1              ;2 [12]
 152:	0f 93       	push	r16
    push    x2              ;2 [14]
 154:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 156:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 158:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 15a:	02 fb       	bst	r16, 2
    bld     shift, 0        ;1 [20]
 15c:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 15e:	4f 93       	push	r20
    push    cnt             ;2 [24]
 160:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 162:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 164:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 166:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 168:	02 fb       	bst	r16, 2
    bld     shift, 1        ;1 [29]
 16a:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 16c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 16e:	31 c0       	rjmp	.+98     	; 0x1d2 <rxbit2>

00000170 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 170:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 172:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 174:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 176:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 178:	28 c0       	rjmp	.+80     	; 0x1ca <didUnstuff0>

0000017a <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 17a:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 17c:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 17e:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 180:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 182:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 184:	29 c0       	rjmp	.+82     	; 0x1d8 <didUnstuff1>

00000186 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 186:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 188:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 18a:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 18c:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 18e:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 190:	2b c0       	rjmp	.+86     	; 0x1e8 <didUnstuff2>

00000192 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 192:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 194:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 196:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 198:	2a c0       	rjmp	.+84     	; 0x1ee <didUnstuff3>

0000019a <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 19a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 19c:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 19e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1a0:	2c c0       	rjmp	.+88     	; 0x1fa <didUnstuff4>

000001a2 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1a2:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1a4:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 1a6:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1a8:	2f c0       	rjmp	.+94     	; 0x208 <didUnstuff5>

000001aa <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1aa:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1ac:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 1ae:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1b0:	32 c0       	rjmp	.+100    	; 0x216 <didUnstuff6>

000001b2 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1b2:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1b4:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 1b6:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1b8:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1ba:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1bc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1be:	12 fb       	bst	r17, 2
    bld     shift, 0    ;1 [8]
 1c0:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1c2:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 1c4:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;1 [11] SE0 check for bit 1
 1c6:	c9 f1       	breq	.+114    	; 0x23a <se0>
    andi    shift, 0xf9 ;1 [12]
 1c8:	29 7f       	andi	r18, 0xF9	; 249

000001ca <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1ca:	91 f2       	breq	.-92     	; 0x170 <unstuff0>
    eor     x1, x2      ;1 [14]
 1cc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1ce:	02 fb       	bst	r16, 2
    bld     shift, 1    ;1 [16]
 1d0:	21 f9       	bld	r18, 1

000001d2 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1d2:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 1d4:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 1d6:	89 f2       	breq	.-94     	; 0x17a <unstuff1>

000001d8 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 1d8:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 1da:	58 f1       	brcs	.+86     	; 0x232 <overflow>
    eor     x2, x1      ;1 [22]
 1dc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 1de:	12 fb       	bst	r17, 2
    bld     shift, 2    ;1 [24]
 1e0:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 1e2:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 1e4:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 1e6:	79 f2       	breq	.-98     	; 0x186 <unstuff2>

000001e8 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 1e8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 1ea:	02 fb       	bst	r16, 2
    bld     shift, 3    ;1 [30]
 1ec:	23 f9       	bld	r18, 3

000001ee <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 1ee:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 1f0:	81 f2       	breq	.-96     	; 0x192 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 1f2:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 1f4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 1f6:	12 fb       	bst	r17, 2
    bld     shift, 4    ;1 [36]
 1f8:	24 f9       	bld	r18, 4

000001fa <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 1fa:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 1fc:	71 f2       	breq	.-100    	; 0x19a <unstuff4>
    nop2                ;2 [40]
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 200:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 202:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 204:	02 fb       	bst	r16, 2
    bld     shift, 5    ;1 [44]
 206:	25 f9       	bld	r18, 5

00000208 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 208:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 20a:	59 f2       	breq	.-106    	; 0x1a2 <unstuff5>
    nop2                ;2 [48]
 20c:	00 c0       	rjmp	.+0      	; 0x20e <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 20e:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 210:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 212:	12 fb       	bst	r17, 2
    bld     shift, 6    ;1 [52]
 214:	26 f9       	bld	r18, 6

00000216 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 216:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 218:	40 f2       	brcs	.-112    	; 0x1aa <unstuff6>
    nop2                ;2 [56]
 21a:	00 c0       	rjmp	.+0      	; 0x21c <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 21c:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 21e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 220:	02 fb       	bst	r16, 2
    bld     shift, 7    ;1 [60]
 222:	27 f9       	bld	r18, 7

00000224 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 224:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 226:	28 f6       	brcc	.-118    	; 0x1b2 <rxLoop>

00000228 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 228:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 22a:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 22c:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 22e:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 230:	f9 cf       	rjmp	.-14     	; 0x224 <didUnstuff7>

00000232 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 232:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 234:	1a bf       	out	0x3a, r17	; 58

00000236 <ignorePacket>:
ignorePacket:
    clr     token
 236:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 238:	19 c0       	rjmp	.+50     	; 0x26c <handleSetupOrOut>

0000023a <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 23a:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 23c:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 23e:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 240:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 242:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 244:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 246:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 248:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 24a:	f9 f0       	breq	.+62     	; 0x28a <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 24c:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 24e:	e9 f0       	breq	.+58     	; 0x28a <handleData>
    lds     shift, usbDeviceAddr;[17]
 250:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 254:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 256:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 258:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 25a:	ed cf       	rjmp	.-38     	; 0x236 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 25c:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 25e:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 260:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 262:	41 f1       	breq	.+80     	; 0x2b4 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 264:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 266:	11 f0       	breq	.+4      	; 0x26c <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 268:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 26a:	29 f7       	brne	.-54     	; 0x236 <ignorePacket>

0000026c <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 26c:	00 93 92 00 	sts	0x0092, r16	; 0x800092 <usbCurrentTok>

00000270 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 270:	3f 91       	pop	r19
 272:	4f 91       	pop	r20
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	2f 91       	pop	r18
 27a:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 27c:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 27e:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 280:	4f cf       	rjmp	.-354    	; 0x120 <waitForJ>

00000282 <sofError>:
sofError:
    POP_RETI                    ;macro call
 282:	cf 91       	pop	r28
 284:	cf bf       	out	0x3f, r28	; 63
 286:	cf 91       	pop	r28
    reti
 288:	18 95       	reti

0000028a <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 28a:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <usbCurrentTok>
    tst     shift               ;[20]
 28e:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 290:	79 f3       	breq	.-34     	; 0x270 <doReturn>
    lds     x2, usbRxLen        ;[22]
 292:	10 91 90 00 	lds	r17, 0x0090	; 0x800090 <usbRxLen>
    tst     x2                  ;[24]
 296:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 298:	69 f5       	brne	.+90     	; 0x2f4 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 29a:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 29c:	6a f1       	brmi	.+90     	; 0x2f8 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 29e:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2a2:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2a6:	10 91 8d 00 	lds	r17, 0x008D	; 0x80008d <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2aa:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2ac:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2ae:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <sendAckAndReti>

000002b4 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2b4:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2b8:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2ba:	e4 f4       	brge	.+56     	; 0x2f4 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2bc:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2be:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2c2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2c6:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2c8:	19 c0       	rjmp	.+50     	; 0x2fc <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2ca:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2ce:	c4 e7       	ldi	r28, 0x74	; 116
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2d2:	18 c0       	rjmp	.+48     	; 0x304 <usbSendAndReti>

000002d4 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2d4:	30 91 7f 00 	lds	r19, 0x007F	; 0x80007f <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2d8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2dc:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2e0:	c0 e8       	ldi	r28, 0x80	; 128
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <usbSendAndReti>

000002e6 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 2e6:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 2e8:	a8 f4       	brcc	.+42     	; 0x314 <doExorN1>
    subi    x4, 1               ;[-3]
 2ea:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 2ec:	a9 f4       	brne	.+42     	; 0x318 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 2ee:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 2f0:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <stuffN1Delay>

000002f4 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 2f4:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <usbSendX3>

000002f8 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 2f8:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <usbSendX3>

000002fc <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 2fc:	43 2f       	mov	r20, r19

000002fe <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 2fe:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 300:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 302:	32 e0       	ldi	r19, 0x02	; 2

00000304 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 304:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 306:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 308:	92 9a       	sbi	0x12, 2	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 30a:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 30c:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 30e:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 310:	1c e0       	ldi	r17, 0x0C	; 12
    push    x4                  ;[-4]
 312:	5f 93       	push	r21

00000314 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 314:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 316:	56 e0       	ldi	r21, 0x06	; 6

00000318 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 318:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 31a:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 31c:	20 f4       	brcc	.+8      	; 0x326 <doExorN2>
    subi    x4, 1               ;[03]
 31e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 320:	21 f4       	brne	.+8      	; 0x32a <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 322:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 324:	f9 cf       	rjmp	.-14     	; 0x318 <commonN1>

00000326 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 326:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 328:	56 e0       	ldi	r21, 0x06	; 6

0000032a <commonN2>:
commonN2:
    nop                         ;[06] [14]
 32a:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 32c:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 32e:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 330:	d0 f2       	brcs	.-76     	; 0x2e6 <stuffN1Delay>

00000332 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 332:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 334:	28 f4       	brcc	.+10     	; 0x340 <doExor6>
    subi    x4, 1               ;[44]
 336:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 338:	29 f4       	brne	.+10     	; 0x344 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 33a:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 33c:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <stuff6Delay>

00000340 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 340:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 342:	56 e0       	ldi	r21, 0x06	; 6

00000344 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 344:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 346:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 348:	20 f4       	brcc	.+8      	; 0x352 <doExor7>
    subi    x4, 1               ;[50]
 34a:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 34c:	21 f4       	brne	.+8      	; 0x356 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 34e:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 350:	f9 cf       	rjmp	.-14     	; 0x344 <common6>

00000352 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 352:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 354:	56 e0       	ldi	r21, 0x06	; 6

00000356 <common7>:
common7:
    ld      shift, y+           ;[53]
 356:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 358:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 35a:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 35c:	21 f6       	brne	.-120    	; 0x2e6 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 35e:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[59]
 360:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 364:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 366:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 368:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 36a:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 36c:	11 f0       	breq	.+4      	; 0x372 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 36e:	10 93 8b 00 	sts	0x008B, r17	; 0x80008b <usbDeviceAddr>

00000372 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 372:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 374:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 376:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR          ;[06]
 378:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 37a:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1              ;[08]
 37c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 37e:	43 7f       	andi	r20, 0xF3	; 243
    pop     x4                  ;[10]
 380:	5f 91       	pop	r21
    nop2                        ;[12]
 382:	00 c0       	rjmp	.+0      	; 0x384 <skipAddrAssign+0x12>
    nop2                        ;[14]
 384:	00 c0       	rjmp	.+0      	; 0x386 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 386:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 388:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 38a:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 38c:	71 cf       	rjmp	.-286    	; 0x270 <doReturn>

0000038e <i2c_init>:
	}

	i2c_stop();

	return 0;
}
 38e:	88 e4       	ldi	r24, 0x48	; 72
 390:	80 b9       	out	0x00, r24	; 0
 392:	08 95       	ret

00000394 <i2c_start>:
 394:	16 be       	out	0x36, r1	; 54
 396:	94 ea       	ldi	r25, 0xA4	; 164
 398:	96 bf       	out	0x36, r25	; 54
 39a:	06 b6       	in	r0, 0x36	; 54
 39c:	07 fe       	sbrs	r0, 7
 39e:	fd cf       	rjmp	.-6      	; 0x39a <i2c_start+0x6>
 3a0:	91 b1       	in	r25, 0x01	; 1
 3a2:	98 7f       	andi	r25, 0xF8	; 248
 3a4:	98 30       	cpi	r25, 0x08	; 8
 3a6:	79 f4       	brne	.+30     	; 0x3c6 <i2c_start+0x32>
 3a8:	83 b9       	out	0x03, r24	; 3
 3aa:	84 e8       	ldi	r24, 0x84	; 132
 3ac:	86 bf       	out	0x36, r24	; 54
 3ae:	06 b6       	in	r0, 0x36	; 54
 3b0:	07 fe       	sbrs	r0, 7
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <i2c_start+0x1a>
 3b4:	91 b1       	in	r25, 0x01	; 1
 3b6:	98 7f       	andi	r25, 0xF8	; 248
 3b8:	98 31       	cpi	r25, 0x18	; 24
 3ba:	39 f0       	breq	.+14     	; 0x3ca <i2c_start+0x36>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 34       	cpi	r25, 0x40	; 64
 3c0:	29 f4       	brne	.+10     	; 0x3cc <i2c_start+0x38>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	08 95       	ret
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <i2c_write>:
 3ce:	83 b9       	out	0x03, r24	; 3
 3d0:	84 e8       	ldi	r24, 0x84	; 132
 3d2:	86 bf       	out	0x36, r24	; 54
 3d4:	06 b6       	in	r0, 0x36	; 54
 3d6:	07 fe       	sbrs	r0, 7
 3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <i2c_write+0x6>
 3da:	91 b1       	in	r25, 0x01	; 1
 3dc:	98 7f       	andi	r25, 0xF8	; 248
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	98 32       	cpi	r25, 0x28	; 40
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <i2c_write+0x18>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <i2c_read_ack>:
 3e8:	84 ec       	ldi	r24, 0xC4	; 196
 3ea:	86 bf       	out	0x36, r24	; 54
 3ec:	06 b6       	in	r0, 0x36	; 54
 3ee:	07 fe       	sbrs	r0, 7
 3f0:	fd cf       	rjmp	.-6      	; 0x3ec <i2c_read_ack+0x4>
 3f2:	83 b1       	in	r24, 0x03	; 3
 3f4:	08 95       	ret

000003f6 <i2c_read_nack>:
 3f6:	84 e8       	ldi	r24, 0x84	; 132
 3f8:	86 bf       	out	0x36, r24	; 54
 3fa:	06 b6       	in	r0, 0x36	; 54
 3fc:	07 fe       	sbrs	r0, 7
 3fe:	fd cf       	rjmp	.-6      	; 0x3fa <i2c_read_nack+0x4>
 400:	83 b1       	in	r24, 0x03	; 3
 402:	08 95       	ret

00000404 <i2c_write_Reg_Byte>:
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c6 2f       	mov	r28, r22
 40a:	d4 2f       	mov	r29, r20
 40c:	c3 df       	rcall	.-122    	; 0x394 <i2c_start>
 40e:	81 11       	cpse	r24, r1
 410:	0b c0       	rjmp	.+22     	; 0x428 <i2c_write_Reg_Byte+0x24>
 412:	8c 2f       	mov	r24, r28
 414:	dc df       	rcall	.-72     	; 0x3ce <i2c_write>
 416:	81 11       	cpse	r24, r1
 418:	09 c0       	rjmp	.+18     	; 0x42c <i2c_write_Reg_Byte+0x28>
 41a:	8d 2f       	mov	r24, r29
 41c:	d8 df       	rcall	.-80     	; 0x3ce <i2c_write>
 41e:	81 11       	cpse	r24, r1
 420:	07 c0       	rjmp	.+14     	; 0x430 <i2c_write_Reg_Byte+0x2c>
 422:	94 e9       	ldi	r25, 0x94	; 148
 424:	96 bf       	out	0x36, r25	; 54
 426:	05 c0       	rjmp	.+10     	; 0x432 <i2c_write_Reg_Byte+0x2e>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	03 c0       	rjmp	.+6      	; 0x432 <i2c_write_Reg_Byte+0x2e>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	01 c0       	rjmp	.+2      	; 0x432 <i2c_write_Reg_Byte+0x2e>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 438:	af 92       	push	r10
 43a:	bf 92       	push	r11
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	18 2f       	mov	r17, r24
 44c:	06 2f       	mov	r16, r22
 44e:	5a 01       	movw	r10, r20
 450:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 452:	a0 df       	rcall	.-192    	; 0x394 <i2c_start>
 454:	81 11       	cpse	r24, r1
 456:	1d c0       	rjmp	.+58     	; 0x492 <__stack+0x33>

	i2c_write(regaddr);
 458:	80 2f       	mov	r24, r16
 45a:	b9 df       	rcall	.-142    	; 0x3ce <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 45c:	81 2f       	mov	r24, r17
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	99 df       	rcall	.-206    	; 0x394 <i2c_start>
 462:	d8 2e       	mov	r13, r24
 464:	81 11       	cpse	r24, r1
 466:	18 c0       	rjmp	.+48     	; 0x498 <__stack+0x39>

	for (uint16_t i = 0; i < (length-1); i++)
 468:	8e 01       	movw	r16, r28
 46a:	01 50       	subi	r16, 0x01	; 1
 46c:	11 09       	sbc	r17, r1
 46e:	49 f0       	breq	.+18     	; 0x482 <__stack+0x23>
 470:	e5 01       	movw	r28, r10
 472:	75 01       	movw	r14, r10
 474:	e0 0e       	add	r14, r16
 476:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 478:	b7 df       	rcall	.-146    	; 0x3e8 <i2c_read_ack>
 47a:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 47c:	ec 16       	cp	r14, r28
 47e:	fd 06       	cpc	r15, r29
 480:	d9 f7       	brne	.-10     	; 0x478 <__stack+0x19>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 482:	e5 01       	movw	r28, r10
 484:	c0 0f       	add	r28, r16
 486:	d1 1f       	adc	r29, r17
 488:	b6 df       	rcall	.-148    	; 0x3f6 <i2c_read_nack>
 48a:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 48c:	84 e9       	ldi	r24, 0x94	; 148
 48e:	86 bf       	out	0x36, r24	; 54
 490:	05 c0       	rjmp	.+10     	; 0x49c <__stack+0x3d>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 492:	dd 24       	eor	r13, r13
 494:	d3 94       	inc	r13
 496:	02 c0       	rjmp	.+4      	; 0x49c <__stack+0x3d>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 498:	dd 24       	eor	r13, r13
 49a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 49c:	8d 2d       	mov	r24, r13
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	bf 90       	pop	r11
 4ae:	af 90       	pop	r10
 4b0:	08 95       	ret

000004b2 <init_uart>:
}

int abs(int a)
{
	return a>0?a:-a;
}
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	9c 01       	movw	r18, r24
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	60 eb       	ldi	r22, 0xB0	; 176
 4bc:	71 e7       	ldi	r23, 0x71	; 113
 4be:	8b e0       	ldi	r24, 0x0B	; 11
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	59 d2       	rcall	.+1202   	; 0x976 <__udivmodsi4>
 4c4:	83 2f       	mov	r24, r19
 4c6:	99 27       	eor	r25, r25
 4c8:	80 bd       	out	0x20, r24	; 32
 4ca:	29 b9       	out	0x09, r18	; 9
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	88 61       	ori	r24, 0x18	; 24
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	80 b5       	in	r24, 0x20	; 32
 4d4:	8e 68       	ori	r24, 0x8E	; 142
 4d6:	80 bd       	out	0x20, r24	; 32
 4d8:	08 95       	ret

000004da <initsensor>:
 4da:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <num+0x1>
 4de:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <num>
 4e2:	55 df       	rcall	.-342    	; 0x38e <i2c_init>
 4e4:	40 e8       	ldi	r20, 0x80	; 128
 4e6:	60 e1       	ldi	r22, 0x10	; 16
 4e8:	86 ed       	ldi	r24, 0xD6	; 214
 4ea:	8c df       	rcall	.-232    	; 0x404 <i2c_write_Reg_Byte>
 4ec:	81 11       	cpse	r24, r1
 4ee:	0a c0       	rjmp	.+20     	; 0x504 <initsensor+0x2a>
 4f0:	40 e8       	ldi	r20, 0x80	; 128
 4f2:	61 e1       	ldi	r22, 0x11	; 17
 4f4:	86 ed       	ldi	r24, 0xD6	; 214
 4f6:	86 df       	rcall	.-244    	; 0x404 <i2c_write_Reg_Byte>
 4f8:	81 11       	cpse	r24, r1
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <initsensor+0x2a>
 4fc:	44 e0       	ldi	r20, 0x04	; 4
 4fe:	62 e1       	ldi	r22, 0x12	; 18
 500:	86 ed       	ldi	r24, 0xD6	; 214
 502:	80 df       	rcall	.-256    	; 0x404 <i2c_write_Reg_Byte>
 504:	08 95       	ret

00000506 <readsensor>:

void readsensor()
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	00 d0       	rcall	.+0      	; 0x50c <readsensor+0x6>
 50c:	00 d0       	rcall	.+0      	; 0x50e <readsensor+0x8>
 50e:	00 d0       	rcall	.+0      	; 0x510 <readsensor+0xa>
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
	int16_t buffer[3];
	i2c_readReg(ACCEL,0x28,buffer,6);
 514:	26 e0       	ldi	r18, 0x06	; 6
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	ae 01       	movw	r20, r28
 51a:	4f 5f       	subi	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	68 e2       	ldi	r22, 0x28	; 40
 520:	86 ed       	ldi	r24, 0xD6	; 214
 522:	8a df       	rcall	.-236    	; 0x438 <i2c_readReg>
	acc_x=buffer[0];
 524:	89 81       	ldd	r24, Y+1	; 0x01
 526:	9a 81       	ldd	r25, Y+2	; 0x02
 528:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <acc_x+0x1>
 52c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <acc_x>
	acc_y=buffer[1];
 530:	8b 81       	ldd	r24, Y+3	; 0x03
 532:	9c 81       	ldd	r25, Y+4	; 0x04
 534:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <acc_y+0x1>
 538:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <acc_y>
	acc_z=buffer[2];
 53c:	8d 81       	ldd	r24, Y+5	; 0x05
 53e:	9e 81       	ldd	r25, Y+6	; 0x06
 540:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <acc_z+0x1>
 544:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <acc_z>
}
 548:	26 96       	adiw	r28, 0x06	; 6
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <close>:

void close()
{
	DDRD |= (1<<PD7);
 55a:	8f 9a       	sbi	0x11, 7	; 17
 55c:	8a e0       	ldi	r24, 0x0A	; 10
 55e:	90 e0       	ldi	r25, 0x00	; 0
	for(int x = 0; x < 10; x++)
	{
		
		PORTD |= (1<<PD7);
 560:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 562:	e7 e2       	ldi	r30, 0x27	; 39
 564:	f3 e2       	ldi	r31, 0x23	; 35
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <close+0xc>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <close+0x12>
 56c:	00 00       	nop
		_delay_us(3000);
		PORTD &= ~(1<<PD7);
 56e:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 570:	ff eb       	ldi	r31, 0xBF	; 191
 572:	24 ed       	ldi	r18, 0xD4	; 212
 574:	31 e0       	ldi	r19, 0x01	; 1
 576:	f1 50       	subi	r31, 0x01	; 1
 578:	20 40       	sbci	r18, 0x00	; 0
 57a:	30 40       	sbci	r19, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <close+0x1c>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <close+0x26>
 580:	00 00       	nop
 582:	01 97       	sbiw	r24, 0x01	; 1
}

void close()
{
	DDRD |= (1<<PD7);
	for(int x = 0; x < 10; x++)
 584:	69 f7       	brne	.-38     	; 0x560 <close+0x6>
		PORTD |= (1<<PD7);
		_delay_us(3000);
		PORTD &= ~(1<<PD7);
		_delay_ms(50);
	}
}
 586:	08 95       	ret

00000588 <open>:

void open()
{
	DDRD |= (1<<PD7);
 588:	8f 9a       	sbi	0x11, 7	; 17
 58a:	8a e0       	ldi	r24, 0x0A	; 10
 58c:	90 e0       	ldi	r25, 0x00	; 0
	for(int x = 0; x < 10; x++)
	{
		
		PORTD |= (1<<PD7);
 58e:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 590:	e3 e9       	ldi	r30, 0x93	; 147
 592:	f1 e1       	ldi	r31, 0x11	; 17
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <open+0xc>
 598:	00 c0       	rjmp	.+0      	; 0x59a <open+0x12>
 59a:	00 00       	nop
		_delay_us(1500);
		PORTD &= ~(1<<PD7);
 59c:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	ff eb       	ldi	r31, 0xBF	; 191
 5a0:	24 ed       	ldi	r18, 0xD4	; 212
 5a2:	31 e0       	ldi	r19, 0x01	; 1
 5a4:	f1 50       	subi	r31, 0x01	; 1
 5a6:	20 40       	sbci	r18, 0x00	; 0
 5a8:	30 40       	sbci	r19, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <open+0x1c>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <open+0x26>
 5ae:	00 00       	nop
 5b0:	01 97       	sbiw	r24, 0x01	; 1
}

void open()
{
	DDRD |= (1<<PD7);
	for(int x = 0; x < 10; x++)
 5b2:	69 f7       	brne	.-38     	; 0x58e <open+0x6>
		PORTD |= (1<<PD7);
		_delay_us(1500);
		PORTD &= ~(1<<PD7);
		_delay_ms(50);
	}
}
 5b4:	08 95       	ret

000005b6 <processsensor>:
*/

long counter = 0;
void processsensor()
{
	if(acc_x > 0 && acc_x > acc_y && acc_x > acc_z)
 5b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <acc_x>
 5ba:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <acc_x+0x1>
 5be:	18 16       	cp	r1, r24
 5c0:	19 06       	cpc	r1, r25
 5c2:	14 f5       	brge	.+68     	; 0x608 <processsensor+0x52>
 5c4:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <acc_y>
 5c8:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <acc_y+0x1>
 5cc:	28 17       	cp	r18, r24
 5ce:	39 07       	cpc	r19, r25
 5d0:	dc f4       	brge	.+54     	; 0x608 <processsensor+0x52>
 5d2:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <acc_z>
 5d6:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <acc_z+0x1>
 5da:	28 17       	cp	r18, r24
 5dc:	39 07       	cpc	r19, r25
 5de:	a4 f4       	brge	.+40     	; 0x608 <processsensor+0x52>
	{
		counter++;
 5e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 5e4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 5e8:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 5ec:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	a1 1d       	adc	r26, r1
 5f4:	b1 1d       	adc	r27, r1
 5f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 5fa:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 5fe:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <__data_end+0x2>
 602:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <__data_end+0x3>
 606:	09 c0       	rjmp	.+18     	; 0x61a <processsensor+0x64>
	}
	else
	{
		counter = 0;
 608:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 60c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 610:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
 614:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
		close();
 618:	a0 df       	rcall	.-192    	; 0x55a <close>
	}
	if(counter > 10000)
 61a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 61e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 622:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <__data_end+0x2>
 626:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <__data_end+0x3>
 62a:	81 31       	cpi	r24, 0x11	; 17
 62c:	97 42       	sbci	r25, 0x27	; 39
 62e:	a1 05       	cpc	r26, r1
 630:	b1 05       	cpc	r27, r1
 632:	0c f0       	brlt	.+2      	; 0x636 <processsensor+0x80>
	{
		open();
 634:	a9 df       	rcall	.-174    	; 0x588 <open>
 636:	08 95       	ret

00000638 <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 638:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 63a:	90 81       	ld	r25, Z
 63c:	90 76       	andi	r25, 0x60	; 96
 63e:	90 32       	cpi	r25, 0x20	; 32
 640:	e1 f4       	brne	.+56     	; 0x67a <usbFunctionSetup+0x42>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 642:	81 81       	ldd	r24, Z+1	; 0x01
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	41 f4       	brne	.+16     	; 0x658 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 648:	87 e6       	ldi	r24, 0x67	; 103
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 650:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
            return sizeof(reportBuffer);
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	41 f4       	brne	.+16     	; 0x66c <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 65c:	86 e6       	ldi	r24, 0x66	; 102
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 664:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
            return 1;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 66c:	8a 30       	cpi	r24, 0x0A	; 10
 66e:	39 f4       	brne	.+14     	; 0x67e <usbFunctionSetup+0x46>
            idleRate = rq->wValue.bytes[1];
 670:	83 81       	ldd	r24, Z+3	; 0x03
 672:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	08 95       	ret
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	08 95       	ret
 67e:	80 e0       	ldi	r24, 0x00	; 0
}
 680:	08 95       	ret

00000682 <main>:

/* ------------------------------------------------------------------------- */

int __attribute__((noreturn)) main(void)
{
 	close();
 682:	6b df       	rcall	.-298    	; 0x55a <close>
	uchar   i;
	initsensor();
 684:	2a df       	rcall	.-428    	; 0x4da <initsensor>
	init_uart(9600);
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	95 e2       	ldi	r25, 0x25	; 37
 68a:	13 df       	rcall	.-474    	; 0x4b2 <init_uart>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 68c:	9e e0       	ldi	r25, 0x0E	; 14
 68e:	88 e1       	ldi	r24, 0x18	; 24
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	a8 95       	wdr
 696:	81 bd       	out	0x21, r24	; 33
 698:	0f be       	out	0x3f, r0	; 63
 69a:	91 bd       	out	0x21, r25	; 33
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 69c:	5f d1       	rcall	.+702    	; 0x95c <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 69e:	8a 9a       	sbi	0x11, 2	; 17
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
        wdt_reset();
 6a2:	a8 95       	wdr
 6a4:	e7 eb       	ldi	r30, 0xB7	; 183
 6a6:	fb e0       	ldi	r31, 0x0B	; 11
 6a8:	31 97       	sbiw	r30, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <main+0x26>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x2c>
 6ae:	00 00       	nop
 6b0:	81 50       	subi	r24, 0x01	; 1
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
    i = 0;
    while(--i){             /* fake USB disconnect for > 250 ms */
 6b2:	b9 f7       	brne	.-18     	; 0x6a2 <main+0x20>
        wdt_reset();
        _delay_ms(1);
    }
    usbDeviceConnect();
 6b4:	8a 98       	cbi	0x11, 2	; 17
    sei();
 6b6:	78 94       	sei
	readsensor();
	processsensor();
        wdt_reset();
        usbPoll();
	
        if(usbInterruptIsReady()){
 6b8:	cf e7       	ldi	r28, 0x7F	; 127
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
    sei();
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
    unsigned long counter = 0;
	for(;;){                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
	readsensor();
 6bc:	24 df       	rcall	.-440    	; 0x506 <readsensor>
	processsensor();
 6be:	7b df       	rcall	.-266    	; 0x5b6 <processsensor>
        wdt_reset();
 6c0:	a8 95       	wdr
        usbPoll();
 6c2:	2b d0       	rcall	.+86     	; 0x71a <usbPoll>
	
        if(usbInterruptIsReady()){
 6c4:	88 81       	ld	r24, Y
 6c6:	84 ff       	sbrs	r24, 4
 6c8:	f9 cf       	rjmp	.-14     	; 0x6bc <main+0x3a>
            /* called after every poll of the interrupt endpoint */
            //advanceCircleByFixedAngle();
            
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 6ca:	64 e0       	ldi	r22, 0x04	; 4
 6cc:	87 e6       	ldi	r24, 0x67	; 103
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	01 d0       	rcall	.+2      	; 0x6d4 <usbSetInterrupt>
 6d2:	f4 cf       	rjmp	.-24     	; 0x6bc <main+0x3a>

000006d4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 6d4:	cf 93       	push	r28
 6d6:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 6d8:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <usbTxStatus1>
 6dc:	24 ff       	sbrs	r18, 4
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 6e0:	ef e7       	ldi	r30, 0x7F	; 127
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	31 81       	ldd	r19, Z+1	; 0x01
 6e6:	28 e8       	ldi	r18, 0x88	; 136
 6e8:	23 27       	eor	r18, r19
 6ea:	21 83       	std	Z+1, r18	; 0x01
 6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 6ee:	2a e5       	ldi	r18, 0x5A	; 90
 6f0:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <usbTxStatus1>
    }
    p = txStatus->buffer + 1;
    i = len;
 6f4:	2c 2f       	mov	r18, r28
 6f6:	e8 2f       	mov	r30, r24
 6f8:	f9 2f       	mov	r31, r25
 6fa:	a1 e8       	ldi	r26, 0x81	; 129
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 6fe:	81 91       	ld	r24, Z+
 700:	8d 93       	st	X+, r24
 702:	21 50       	subi	r18, 0x01	; 1
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 704:	12 16       	cp	r1, r18
 706:	dc f3       	brlt	.-10     	; 0x6fe <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 708:	6c 2f       	mov	r22, r28
 70a:	81 e8       	ldi	r24, 0x81	; 129
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	01 dd       	rcall	.-1534   	; 0x112 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 710:	cc 5f       	subi	r28, 0xFC	; 252
 712:	c0 93 7f 00 	sts	0x007F, r28	; 0x80007f <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 71e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <usbRxLen>
 722:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 724:	0a f4       	brpl	.+2      	; 0x728 <usbPoll+0xe>
 726:	b4 c0       	rjmp	.+360    	; 0x890 <usbPoll+0x176>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 728:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <usbRxToken>
 72c:	9d 32       	cpi	r25, 0x2D	; 45
 72e:	09 f0       	breq	.+2      	; 0x732 <usbPoll+0x18>
 730:	ad c0       	rjmp	.+346    	; 0x88c <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 732:	88 30       	cpi	r24, 0x08	; 8
 734:	09 f0       	breq	.+2      	; 0x738 <usbPoll+0x1e>
 736:	aa c0       	rjmp	.+340    	; 0x88c <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 738:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <usbInputBufOffset>
 73c:	cc e0       	ldi	r28, 0x0C	; 12
 73e:	d0 e0       	ldi	r29, 0x00	; 0
 740:	c8 1b       	sub	r28, r24
 742:	d1 09       	sbc	r29, r1
 744:	cc 56       	subi	r28, 0x6C	; 108
 746:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 748:	83 ec       	ldi	r24, 0xC3	; 195
 74a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 74e:	8a e5       	ldi	r24, 0x5A	; 90
 750:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
        usbMsgFlags = 0;
 754:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 758:	88 81       	ld	r24, Y
 75a:	80 76       	andi	r24, 0x60	; 96
 75c:	19 f0       	breq	.+6      	; 0x764 <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 75e:	ce 01       	movw	r24, r28
 760:	6b df       	rcall	.-298    	; 0x638 <usbFunctionSetup>
 762:	8b c0       	rjmp	.+278    	; 0x87a <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 764:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 766:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 76a:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 76c:	81 11       	cpse	r24, r1
 76e:	06 c0       	rjmp	.+12     	; 0x77c <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 770:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 774:	2d e7       	ldi	r18, 0x7D	; 125
 776:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 778:	82 e0       	ldi	r24, 0x02	; 2
 77a:	7b c0       	rjmp	.+246    	; 0x872 <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 77c:	85 30       	cpi	r24, 0x05	; 5
 77e:	31 f4       	brne	.+12     	; 0x78c <usbPoll+0x72>
        usbNewDeviceAddr = value;
 780:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 784:	2d e7       	ldi	r18, 0x7D	; 125
 786:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	73 c0       	rjmp	.+230    	; 0x872 <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 78c:	86 30       	cpi	r24, 0x06	; 6
 78e:	09 f0       	breq	.+2      	; 0x792 <usbPoll+0x78>
 790:	50 c0       	rjmp	.+160    	; 0x832 <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 792:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	41 f4       	brne	.+16     	; 0x7a8 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 798:	8c e7       	ldi	r24, 0x7C	; 124
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 7a0:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 7a4:	82 e1       	ldi	r24, 0x12	; 18
 7a6:	41 c0       	rjmp	.+130    	; 0x82a <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	41 f4       	brne	.+16     	; 0x7bc <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 7ac:	8a e5       	ldi	r24, 0x5A	; 90
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 7b4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 7b8:	82 e2       	ldi	r24, 0x22	; 34
 7ba:	37 c0       	rjmp	.+110    	; 0x82a <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 7bc:	83 30       	cpi	r24, 0x03	; 3
 7be:	f1 f4       	brne	.+60     	; 0x7fc <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 7c0:	91 11       	cpse	r25, r1
 7c2:	08 c0       	rjmp	.+16     	; 0x7d4 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 7c4:	8c ea       	ldi	r24, 0xAC	; 172
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 7cc:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 7d0:	84 e0       	ldi	r24, 0x04	; 4
 7d2:	2b c0       	rjmp	.+86     	; 0x82a <usbPoll+0x110>
        SWITCH_CASE(1)
 7d4:	91 30       	cpi	r25, 0x01	; 1
 7d6:	41 f4       	brne	.+16     	; 0x7e8 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 7d8:	8a e9       	ldi	r24, 0x9A	; 154
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 7e0:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 7e4:	82 e1       	ldi	r24, 0x12	; 18
 7e6:	21 c0       	rjmp	.+66     	; 0x82a <usbPoll+0x110>
        SWITCH_CASE(2)
 7e8:	92 30       	cpi	r25, 0x02	; 2
 7ea:	e1 f4       	brne	.+56     	; 0x824 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 7ec:	8e e8       	ldi	r24, 0x8E	; 142
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 7f4:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 7f8:	8c e0       	ldi	r24, 0x0C	; 12
 7fa:	17 c0       	rjmp	.+46     	; 0x82a <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 7fc:	81 32       	cpi	r24, 0x21	; 33
 7fe:	41 f4       	brne	.+16     	; 0x810 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 800:	8c e6       	ldi	r24, 0x6C	; 108
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 808:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 80c:	89 e0       	ldi	r24, 0x09	; 9
 80e:	0d c0       	rjmp	.+26     	; 0x82a <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 810:	82 32       	cpi	r24, 0x22	; 34
 812:	51 f4       	brne	.+20     	; 0x828 <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 814:	86 e2       	ldi	r24, 0x26	; 38
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <usbMsgPtr+0x1>
 81c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <usbMsgPtr>
 820:	84 e3       	ldi	r24, 0x34	; 52
 822:	03 c0       	rjmp	.+6      	; 0x82a <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	01 c0       	rjmp	.+2      	; 0x82a <usbPoll+0x110>
 828:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 82a:	90 e4       	ldi	r25, 0x40	; 64
 82c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <usbMsgFlags>
 830:	24 c0       	rjmp	.+72     	; 0x87a <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 832:	88 30       	cpi	r24, 0x08	; 8
 834:	99 f0       	breq	.+38     	; 0x85c <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 836:	89 30       	cpi	r24, 0x09	; 9
 838:	31 f4       	brne	.+12     	; 0x846 <usbPoll+0x12c>
        usbConfiguration = value;
 83a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 83e:	2d e7       	ldi	r18, 0x7D	; 125
 840:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	16 c0       	rjmp	.+44     	; 0x872 <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 846:	8a 30       	cpi	r24, 0x0A	; 10
 848:	69 f0       	breq	.+26     	; 0x864 <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 84a:	8b 30       	cpi	r24, 0x0B	; 11
 84c:	79 f4       	brne	.+30     	; 0x86c <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 84e:	8b e4       	ldi	r24, 0x4B	; 75
 850:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 854:	2d e7       	ldi	r18, 0x7D	; 125
 856:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0b c0       	rjmp	.+22     	; 0x872 <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 85c:	23 e9       	ldi	r18, 0x93	; 147
 85e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	07 c0       	rjmp	.+14     	; 0x872 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 864:	2d e7       	ldi	r18, 0x7D	; 125
 866:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	03 c0       	rjmp	.+6      	; 0x872 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 86c:	2d e7       	ldi	r18, 0x7D	; 125
 86e:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 870:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 872:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <usbMsgPtr+0x1>
 876:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 87a:	9f 81       	ldd	r25, Y+7	; 0x07
 87c:	91 11       	cpse	r25, r1
 87e:	04 c0       	rjmp	.+8      	; 0x888 <usbPoll+0x16e>
 880:	9e 81       	ldd	r25, Y+6	; 0x06
 882:	98 17       	cp	r25, r24
 884:	08 f4       	brcc	.+2      	; 0x888 <usbPoll+0x16e>
 886:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 888:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 88c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 890:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
 894:	84 ff       	sbrs	r24, 4
 896:	4b c0       	rjmp	.+150    	; 0x92e <usbPoll+0x214>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 898:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 89c:	8f 3f       	cpi	r24, 0xFF	; 255
 89e:	09 f4       	brne	.+2      	; 0x8a2 <usbPoll+0x188>
 8a0:	46 c0       	rjmp	.+140    	; 0x92e <usbPoll+0x214>
 8a2:	c8 2f       	mov	r28, r24
 8a4:	89 30       	cpi	r24, 0x09	; 9
 8a6:	08 f0       	brcs	.+2      	; 0x8aa <usbPoll+0x190>
 8a8:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 8aa:	8c 1b       	sub	r24, r28
 8ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 8b0:	e4 e7       	ldi	r30, 0x74	; 116
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	90 81       	ld	r25, Z
 8b6:	88 e8       	ldi	r24, 0x88	; 136
 8b8:	89 27       	eor	r24, r25
 8ba:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 8bc:	cc 23       	and	r28, r28
 8be:	09 f4       	brne	.+2      	; 0x8c2 <usbPoll+0x1a8>
 8c0:	44 c0       	rjmp	.+136    	; 0x94a <usbPoll+0x230>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 8c2:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <usbMsgPtr>
 8c6:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 8ca:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <usbMsgFlags>
 8ce:	86 ff       	sbrs	r24, 6
 8d0:	10 c0       	rjmp	.+32     	; 0x8f2 <usbPoll+0x1d8>
 8d2:	a5 e7       	ldi	r26, 0x75	; 117
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	f9 01       	movw	r30, r18
 8d8:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 8da:	94 91       	lpm	r25, Z
                    *data++ = c;
 8dc:	9d 93       	st	X+, r25
                    r++;
 8de:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 8e0:	81 50       	subi	r24, 0x01	; 1
 8e2:	d9 f7       	brne	.-10     	; 0x8da <usbPoll+0x1c0>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	8c 0f       	add	r24, r28
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	01 96       	adiw	r24, 0x01	; 1
 8ec:	28 0f       	add	r18, r24
 8ee:	39 1f       	adc	r19, r25
 8f0:	0e c0       	rjmp	.+28     	; 0x90e <usbPoll+0x1f4>
 8f2:	d9 01       	movw	r26, r18
 8f4:	e5 e7       	ldi	r30, 0x75	; 117
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 8f8:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 8fa:	9d 91       	ld	r25, X+
 8fc:	91 93       	st	Z+, r25
                    r++;
                }while(--i);
 8fe:	81 50       	subi	r24, 0x01	; 1
 900:	e1 f7       	brne	.-8      	; 0x8fa <usbPoll+0x1e0>
 902:	8f ef       	ldi	r24, 0xFF	; 255
 904:	8c 0f       	add	r24, r28
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	28 0f       	add	r18, r24
 90c:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 90e:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <usbMsgPtr+0x1>
 912:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 916:	6c 2f       	mov	r22, r28
 918:	85 e7       	ldi	r24, 0x75	; 117
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	fa db       	rcall	.-2060   	; 0x112 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 91e:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 920:	cc 30       	cpi	r28, 0x0C	; 12
 922:	18 f4       	brcc	.+6      	; 0x92a <usbPoll+0x210>
            usbMsgLen = USB_NO_MSG;
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 92a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 92e:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 930:	8c 70       	andi	r24, 0x0C	; 12
 932:	89 f4       	brne	.+34     	; 0x956 <usbPoll+0x23c>
 934:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 936:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 938:	8c 70       	andi	r24, 0x0C	; 12
 93a:	69 f4       	brne	.+26     	; 0x956 <usbPoll+0x23c>
 93c:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 93e:	d9 f7       	brne	.-10     	; 0x936 <usbPoll+0x21c>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 940:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 944:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 948:	06 c0       	rjmp	.+12     	; 0x956 <usbPoll+0x23c>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 94a:	6c 2f       	mov	r22, r28
 94c:	85 e7       	ldi	r24, 0x75	; 117
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	e0 db       	rcall	.-2112   	; 0x112 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 952:	cc 5f       	subi	r28, 0xFC	; 252
 954:	e7 cf       	rjmp	.-50     	; 0x924 <usbPoll+0x20a>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	08 95       	ret

0000095c <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 95c:	85 b7       	in	r24, 0x35	; 53
 95e:	82 60       	ori	r24, 0x02	; 2
 960:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 962:	8b b7       	in	r24, 0x3b	; 59
 964:	80 64       	ori	r24, 0x40	; 64
 966:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 968:	ef e7       	ldi	r30, 0x7F	; 127
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	8b e4       	ldi	r24, 0x4B	; 75
 96e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 970:	8a e5       	ldi	r24, 0x5A	; 90
 972:	80 83       	st	Z, r24
 974:	08 95       	ret

00000976 <__udivmodsi4>:
 976:	a1 e2       	ldi	r26, 0x21	; 33
 978:	1a 2e       	mov	r1, r26
 97a:	aa 1b       	sub	r26, r26
 97c:	bb 1b       	sub	r27, r27
 97e:	fd 01       	movw	r30, r26
 980:	0d c0       	rjmp	.+26     	; 0x99c <__udivmodsi4_ep>

00000982 <__udivmodsi4_loop>:
 982:	aa 1f       	adc	r26, r26
 984:	bb 1f       	adc	r27, r27
 986:	ee 1f       	adc	r30, r30
 988:	ff 1f       	adc	r31, r31
 98a:	a2 17       	cp	r26, r18
 98c:	b3 07       	cpc	r27, r19
 98e:	e4 07       	cpc	r30, r20
 990:	f5 07       	cpc	r31, r21
 992:	20 f0       	brcs	.+8      	; 0x99c <__udivmodsi4_ep>
 994:	a2 1b       	sub	r26, r18
 996:	b3 0b       	sbc	r27, r19
 998:	e4 0b       	sbc	r30, r20
 99a:	f5 0b       	sbc	r31, r21

0000099c <__udivmodsi4_ep>:
 99c:	66 1f       	adc	r22, r22
 99e:	77 1f       	adc	r23, r23
 9a0:	88 1f       	adc	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	1a 94       	dec	r1
 9a6:	69 f7       	brne	.-38     	; 0x982 <__udivmodsi4_loop>
 9a8:	60 95       	com	r22
 9aa:	70 95       	com	r23
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	9b 01       	movw	r18, r22
 9b2:	ac 01       	movw	r20, r24
 9b4:	bd 01       	movw	r22, r26
 9b6:	cf 01       	movw	r24, r30
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
